#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path("../lib", __dir__)
require "bundler/setup"
require "active_support/core_ext/object/blank"
require "optimist"
require "sources/satellite/operations/worker"
require "sources/satellite/operations/metrics"
require "topological_inventory/providers/common/clowder_config"

def parse_args
  Optimist.options do
    opt :metrics_port, "Port to expose the metrics endpoint on, 0 to disable metrics",
        :type => :integer, :default => (ENV["METRICS_PORT"] || 9394).to_i
    opt :queue_host, "Kafka messaging: hostname or IP", :type => :string, :default => ENV["QUEUE_HOST"] || "localhost"
    opt :queue_port, "Kafka messaging: port", :type => :integer, :default => (ENV["QUEUE_PORT"] || 9092).to_i
    opt :receptor_controller_scheme, "Receptor Controller scheme", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_SCHEME"] || "http"
    opt :receptor_controller_host, "Receptor Controller host", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_HOST"] || "localhost"
    opt :receptor_controller_port, "Receptor Controller port", :type => :integer, :default => (ENV["RECEPTOR_CONTROLLER_PORT"] || 9090).to_i
    opt :receptor_controller_psk, "Pre shared key for auth with receptor controller", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_PSK"]
    opt :sources_scheme, "Sources API scheme", :type => :string, :default => ENV["SOURCES_SCHEME"]
    opt :sources_host, "Sources API host name", :type => :string, :default => ENV["SOURCES_HOST"]
    opt :sources_port, "Sources API port", :type => :integer, :default => ENV["SOURCES_PORT"].to_i
  end
end

def check_args(args)
  (args.keys - %i[help metrics_port receptor_controller_psk]).each do |arg|
    Optimist.die arg, "can't be blank" if args[arg].blank?
    Optimist.die arg, "can't be zero" if arg.to_s.index('port').present? && args[arg].zero?
  end
end

args = parse_args

# Updates kafka/metrics args etc. if provided by the Clowder
if TopologicalInventory::Providers::Common::ClowderConfig.clowder_enabled?
  TopologicalInventory::Providers::Common::ClowderConfig.fill_args_operations(args)
end

check_args(args)

SourcesApiClient.configure do |config|
  config.scheme = args[:sources_scheme]
  config.host   = "#{args[:sources_host]}:#{args[:sources_port]}"
end

ReceptorController::Client.configure do |config|
  config.controller_scheme = args[:receptor_controller_scheme]
  config.controller_host   = "#{args[:receptor_controller_host]}:#{args[:receptor_controller_port]}"
  config.pre_shared_key    = args[:receptor_controller_psk] if args[:receptor_controller_psk].present?
  config.client_id_header  = 'sources'
end

metrics = Sources::Satellite::Operations::Metrics.new(args[:metrics_port])
operations_worker = Sources::Satellite::Operations::Worker.new(metrics)
Signal.trap("TERM") do
  metrics.stop_server
  exit
end

begin
  operations_worker.run
rescue => err
  puts err
  raise
end
